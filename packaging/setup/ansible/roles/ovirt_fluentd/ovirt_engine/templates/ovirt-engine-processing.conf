<filter {{ collectd_write_http_path }}>
  @type record_transformer
  <record>
    timestamp ${time}
  </record>
</filter>

<match {{ collectd_write_http_path }}>
  @type rewrite_tag_filter
  rewriterule1 plugin ^(\w+\S+) ${tag}.$1
</match>

<filter {{ collectd_write_http_path }}.**>
  @type record_transformer
  enable_ruby
  <record>
    max_index ${values.length}
  </record>
</filter>

<match {{ collectd_write_http_path }}.**>
  @type rewrite_tag_filter
  rewriterule1 max_index ^(1|2|3)$ nested.${tag}.$1
</match>

<filter nested.{{ collectd_write_http_path }}.**.1>
  @type record_transformer
  enable_ruby
  auto_typecast true
  <record>
   collectd {"${plugin}":{"${type}":"${values[0]},"plugin":"${plugin}","interval":"${interval}","type":"${type}","type_instance":"${type_instance}","dstypes":"${dstypes[0]}","plugin_instance":"${plugin_instance}"}
  </record>
</filter>

<filter nested.{{ collectd_write_http_path }}.**.2>
  @type record_transformer
  enable_ruby
  auto_typecast true
  <record>
    collectd {"${plugin}":{"${type}":{"${dsnames[0]}":"${values[0]}","${dsnames[1]}":"${values[1]}"}},"plugin":"${plugin}","interval":"${interval}","type":"${type}","type_instance":"${type_instance}","dstypes":"${dstypes[0]}","plugin_instance":"${plugin_instance}"}
  </record>
</filter>

<filter nested.{{ collectd_write_http_path }}.**.3>
  @type record_transformer
  enable_ruby
  auto_typecast true
  <record>
    collectd {"${plugin}":{"${type}":{"${dsnames[0]}":"${values[0]}","${dsnames[1]}":"${values[1]}","${dsnames[2]}":"${values[2]}"}},"plugin":"${plugin}","interval":"${interval}","type":"${type}","type_instance":"${type_instance}","dstypes":"${dstypes[0]}","plugin_instance":"${plugin_instance}"}
  </record>
</filter>

<filter nested.{{ collectd_write_http_path }}.**.{1,2,3}>
  @type record_transformer
  enable_ruby
  auto_typecast true
  <record>
    tag project.ovirt-metrics-engine
    hostname #{Socket.gethostname}
    ovirt {"entity":"engine"}
    # timestamp example: "timestamp":"2017-05-14 09:44:59 +0300" to iso8601 format
    time ${DateTime.strptime("${record['collectd']['timestamp']}", "%Y-%m-%d %H:%M:%S %z").iso8601}
    for_remove ${record["collectd"].delete("timestamp")}
  </record>
  remove_keys host,max_index,values,interval,plugin,type,type_instance,dsnames,dstypes,plugin_instance,for_remove
</filter>

<match nested.{{ collectd_write_http_path }}.**>
  @type rewrite_tag_filter
  rewriterule1 tag ^(\w+\S+) $1
</match>
